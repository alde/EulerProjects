/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.unknownentity.eulermaven;

import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author alde
 */
public class Problem2 {

        /*
         * Each new term in the Fibonacci sequence is generated by adding the
         * previous two terms. By starting with 1 and 2, the first 10 terms will be:
         *
         * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
         *
         * By considering the terms in the Fibonacci sequence whose values do
         * not exceed four million, find the sum of the even-valued terms.
         *
         */
        final int limit = 4000000;

        private boolean isEven(long i) {
                if (i % 2 == 0) {
                        return true;
                }
                return false;
        }

        public void showResult() {
                long sum = 0;
                List<Long> fibonacci = fibonacci();
                for (Long fib : fibonacci) {
                        if (isEven(fib)) {
                                sum += fib;
                                System.out.println("fib is even! (fib: " + fib + ")");
                        }
                }
                System.out.println("Sum of even fibonachi numbers between 0 and " + limit + " is: " + sum);
        }

        private List<Long> fibonacci() {
                List<Long> list = new ArrayList<Long>();
                long t = 0, i=0;
                while (t <= limit) {
                        i++;
                        t = fib(i);
                        list.add(t);
                }
                return list;
        }

        private long fib(long k) {
                if (k <= 2) {
                        return 1;
                }
                else {
                        return fib(k - 1) + fib(k - 2);
                }
        }
}
